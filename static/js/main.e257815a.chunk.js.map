{"version":3,"sources":["logo.svg","grid/mockData.js","grid/column.jsx","grid/cell.jsx","grid/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["colData","Header","accessor","rowData","title","desc","price","quant","img","style","cursor","width","Column","column","index","moveCol","dropRef","React","useRef","useDrop","accept","collect","monitor","handlerId","getHandlerId","drop","item","console","log","current","dragIndex","hoverIndex","useDrag","type","id","isDragging","drag","preview","ref","getHeaderProps","data-handler-id","render","EditableCell","initialValue","value","row","updateMyData","setFocusCell","focusCell","useState","setValue","focusId","setFocusHandle","useEffect","className","autoFocus","onChange","e","target","onBlur","onClick","src","Grid","data","setData","isModalVisible","setIsModalVisible","formRef","createRef","columnsData","useMemo","defaultColumn","Cell","maxWidth","minWidth","tableInstance","useTable","columns","initialState","pageSize","pageIndex","rowIndex","columnId","old","map","usePagination","useColumnOrder","getTableProps","getTableBodyProps","headerGroups","allColumns","rows","prepareRow","page","state","gotoPage","setPageSize","setColumnOrder","dragRecord","newCol","update","$splice","i","DndProvider","backend","HTML5Backend","headerGroup","getHeaderGroupProps","headers","getRowProps","cells","cell","getCellProps","icon","PlusOutlined","size","pageSizeOptions","total","length","showSizeChanger","showQuickJumper","visible","onOk","getFieldValue","newData","onCancel","Item","label","name","rules","message","placeholder","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e257815a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const colData = [\n  {\n    Header: 'Title',\n    accessor: 'title', // accessor is the \"key\" in the data\n  },\n  {\n    Header: 'Description',\n    accessor: 'desc',\n  },\n  {\n    Header: 'Price',\n    accessor: 'price',\n  },\n  {\n    Header: 'Quantity',\n    accessor: 'quant',\n  },\n  {\n    Header: 'Image',\n    accessor: 'img',\n  },\n]\nexport const rowData =[\n   {title:'item1',desc:'1',price:10,quant:'1',img:'https://i.loli.net/2021/04/14/JTBzLhajSMQyR7w.jpg'},\n   {title:'item2',desc:'1',price:10,quant:'1',img:'https://i.loli.net/2021/04/14/JTBzLhajSMQyR7w.jpg'},\n   {title:'item3',desc:'1',price:10,quant:'1',img:'https://i.loli.net/2021/04/14/JTBzLhajSMQyR7w.jpg'},\n   {title:'item4',desc:'1',price:10,quant:'1',img:'https://i.loli.net/2021/04/14/JTBzLhajSMQyR7w.jpg'},\n   {title:'item5',desc:'1',price:10,quant:'1',img:'https://i.loli.net/2021/04/14/JTBzLhajSMQyR7w.jpg'},\n  ]","import React from 'react'\nimport { useDrag, useDrop } from 'react-dnd'\n\nconst DND_ITEM_TYPE = 'col'\nconst style = {\n    cursor: 'move',\n    width:'200px'\n};\nexport default function Column({ column, index, moveCol }) {\n    const dropRef = React.useRef(null)\n    const dragRef = React.useRef(null)\n    const [{ handlerId }, drop] = useDrop({\n        accept: DND_ITEM_TYPE,\n        collect(monitor) {\n            return {\n                handlerId: monitor.getHandlerId(),\n            };\n        },\n      \n        drop(item, monitor) {\n            console.log(item, monitor)\n            if (!dropRef.current) {\n                return\n            }\n            const dragIndex = item.index\n            const hoverIndex = index\n            // Don't replace items with themselves\n            if (dragIndex === hoverIndex) {\n                return\n            }\n            console.log(dragIndex, hoverIndex)\n             moveCol(dragIndex, hoverIndex)\n            // Note: we're mutating the monitor item here!\n            // Generally it's better to avoid mutations,\n            // but it's good here for the sake of performance\n            // to avoid expensive index searches.\n             item.index = hoverIndex\n        },\n    })\n\n    const [{ isDragging }, drag, preview] = useDrag({\n        type: DND_ITEM_TYPE,\n        item: () => {\n            return { id: column, index };\n        },\n        collect: monitor => ({\n            isDragging: monitor.isDragging(),\n        }),\n    })\n\n    const opacity = isDragging ? 0 : 1\n    preview(drop(dropRef))\n    drag(drop(dropRef));\n    // drag(dragRef)\n    return (\n        <th ref={dropRef} {...column.getHeaderProps()} style={{ ...style}} data-handler-id={handlerId}>\n            {// Render the header\n                column.render('Header')}\n        </th>\n    )\n}\n","import React from 'react'\nimport { Input } from 'antd';\nconst EditableCell = ({\n    value: initialValue,\n    row,\n    column,\n    updateMyData,\n    setFocusCell,\n    focusCell\n}) => {\n    console.log(column, row, initialValue)\n    // We need to keep and update the state of the cell normally\n    const [value, setValue] = React.useState(initialValue)\n\n    const onChange = e => {\n        setValue(e.target.value)\n    }\n    // We'll only update the external data when the input is blurred\n    const onBlur = () => {\n        setFocusCell(null)\n        if (value !== initialValue) {\n            updateMyData(row.index, column.id, value)\n        }\n    }\n    const focusId = column.id + '-' + row.id\n\n    const setFocusHandle = () => {\n        setFocusCell(focusId)\n    }\n\n    // If the initialValue is changed external, sync it up with our state\n    React.useEffect(() => {\n        setValue(initialValue)\n    }, [initialValue])\n    const renderImageCell = () => {\n        console.log(value)\n        return (\n            <img src={value}></img>\n        )\n    }\n    const renderTextCell = () => {\n        return <span >{value}</span>\n    }\n    const renderCell = () => (\n        <div className='cellWrapper' onClick={setFocusHandle}>\n            {column.id === 'img' ? renderImageCell() : renderTextCell()}\n        </div>\n    )\n    return (\n        <div className='customCell'>\n            {focusId === focusCell ? <div className='cellWrapper'><Input autoFocus value={value} onChange={onChange} onBlur={onBlur} /> </div> : renderCell()}\n        </div>\n    )\n}\nexport default EditableCell","import React, { useCallback } from 'react'\nimport { useTable, usePagination, useColumnOrder, useResizeColumns,useBlockLayout } from 'react-table'\nimport { Pagination, Button, Tooltip, Modal, Form, Input } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport update from 'immutability-helper';\nimport { colData, rowData } from './mockData'\nimport Col from './column'\nimport EditableCell from './cell'\nimport './index.scss'\n\n\nexport default function Grid() {\n  const [data, setData] = React.useState(() => rowData)\n  const [focusCell, setFocusCell] = React.useState(null)\n  const [isModalVisible, setIsModalVisible] = React.useState(false)\n  const formRef =React.createRef()\n  const updateMyData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setData(old =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n  const columnsData = React.useMemo(\n    () => colData,\n    []\n  )\n  const defaultColumn = {\n    Cell: EditableCell,\n    width: 200,\n    maxWidth: 300,\n    minWidth: 50,\n  }\n  const tableInstance = useTable(\n    { columns: columnsData, data, defaultColumn, initialState: { pageSize: 5, pageIndex: 0 }, updateMyData, setFocusCell, focusCell },\n    usePagination,\n    useColumnOrder,\n\n  )\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    allColumns,\n    prepareRow,\n    page,\n    state: { pageIndex, pageSize },\n    gotoPage,\n    setPageSize,\n    setColumnOrder\n  } = tableInstance\n  console.log(tableInstance)\n  function gotoPageHandle(page, pageSize) {\n    console.log(page, pageSize)\n    setPageSize(pageSize)\n    gotoPage(page - 1)\n  }\n  const moveCol = (dragIndex, hoverIndex) => {\n    const dragRecord = allColumns[dragIndex]\n    const newCol = update(allColumns, {\n      $splice: [\n        [dragIndex, 1],\n        [hoverIndex, 0, dragRecord],\n      ],\n    })\n    setColumnOrder(newCol.map(i => i.id))\n  }\n  const showAddModal = () => {\n    setIsModalVisible(true)\n\n  }\n  const confirmAdd = () => {\n    console.log(formRef)\n    const value =formRef.current.getFieldValue()\n    const newData = [...data,value]\n    setData(newData)\n    setIsModalVisible(false)\n  }\n  const cancelAdd = () => {\n    setIsModalVisible(false)\n  }\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div className='tableWrapper'>\n        <table className='eTable' {...getTableProps()}>\n          <thead>\n            {// Loop over the header rows\n              headerGroups.map(headerGroup => (\n                // Apply the header row props\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                  {// Loop over the headers in each row\n                    headerGroup.headers.map((column, index) => (\n                      // Apply the header cell props\n                      <Col index={index}\n                        column={column}\n                        moveCol={moveCol}\n                        {...column.getHeaderProps()}></Col>\n                    ))}\n                </tr>\n              ))}\n          </thead>\n          {/* Apply the table body props */}\n          <tbody {...getTableBodyProps()}>\n            {// Loop over the table rows\n              page.map(row => {\n                // Prepare the row for display\n                prepareRow(row)\n                return (\n                  // Apply the row props\n                  <tr {...row.getRowProps()}>\n                    {// Loop over the rows cells\n                      row.cells.map(cell => {\n                        // Apply the cell props\n                        return (\n                          <td {...cell.getCellProps()}>\n                            {// Render the cell contents\n                              cell.render('Cell')}\n                          </td>\n                        )\n                      })}\n                  </tr>\n                )\n              })}\n          </tbody>\n        </table>\n        <div className='extraOperRow'>\n          <Tooltip title=\"add\">\n            <Button className='addBtn' type=\"primary\" icon={<PlusOutlined />} onClick={showAddModal} />\n          </Tooltip>\n        </div>\n        <div className='pagingRow'>\n          <Pagination\n            size=\"small\"\n            current={pageIndex + 1}\n            pageSizeOptions={[5, 10, 20, 50]}\n            pageSize={pageSize}\n            total={data.length}\n            showSizeChanger\n            showQuickJumper\n            onChange={gotoPageHandle}\n          />\n        </div>\n      </div >\n      <Modal className='addModal' title=\"Add Product\" visible={isModalVisible} onOk={confirmAdd} onCancel={cancelAdd}>\n        <Form ref ={formRef}>\n          <Form.Item\n            label=\"Title\"\n            name=\"title\"\n            rules={[{ message: 'Please input your username!' }]}\n          >\n            <Input placeholder='Please input Title' />\n          </Form.Item>\n          <Form.Item\n            label=\"Description\"\n            name=\"desc\"\n            rules={[{ message: 'Please input your username!' }]}\n          >\n            <Input placeholder='Please input Title' />\n          </Form.Item>\n          <Form.Item\n            label=\"Price\"\n            name=\"price\"\n            rules={[{ message: 'Please input your username!' }]}\n          >\n            <Input placeholder='Please input Title' />\n          </Form.Item>\n          <Form.Item\n            label=\"Quantity\"\n            name=\"quant\"\n            rules={[{ message: 'Please input your username!' }]}\n          >\n            <Input placeholder='Please input Title' />\n          </Form.Item>\n          <Form.Item\n            label=\"Image\"\n            name=\"img\"\n            rules={[{ message: 'Please input your username!' }]}\n          >\n            <Input placeholder='Please input Image Url' />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </DndProvider>\n  )\n}\n","import logo from './logo.svg';\nimport { BrowserRouter as Router,Switch,Route } from 'react-router-dom'\nimport Grid from './grid'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/\">\n            <Grid />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}